//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IConditionalClient {
    getAll(): Promise<ConditionalList>;
}

export class ConditionalClient implements IConditionalClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    getAll(  cancelToken?: CancelToken | undefined): Promise<ConditionalList> {
        let url_ = this.baseUrl + "/api/Conditional";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<ConditionalList> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConditionalList.fromJS(resultData200);
            return Promise.resolve<ConditionalList>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConditionalList>(null as any);
    }
}

export class ConditionalList implements IConditionalList {
    conditional?: Conditional[] | undefined;

    constructor(data?: IConditionalList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["conditional"])) {
                this.conditional = [] as any;
                for (let item of _data["conditional"])
                    this.conditional!.push(Conditional.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConditionalList {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionalList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.conditional)) {
            data["conditional"] = [];
            for (let item of this.conditional)
                data["conditional"].push(item.toJSON());
        }
        return data;
    }
}

export interface IConditionalList {
    conditional?: Conditional[] | undefined;
}

export class Conditional implements IConditional {
    id?: number;
    rules?: string | undefined;
    name?: string | undefined;
    busy_rule?: string | undefined;
    line_limit?: number;
    line_group?: string | undefined;

    constructor(data?: IConditional) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.rules = _data["rules"];
            this.name = _data["name"];
            this.busy_rule = _data["busy_rule"];
            this.line_limit = _data["line_limit"];
            this.line_group = _data["line_group"];
        }
    }

    static fromJS(data: any): Conditional {
        data = typeof data === 'object' ? data : {};
        let result = new Conditional();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rules"] = this.rules;
        data["name"] = this.name;
        data["busy_rule"] = this.busy_rule;
        data["line_limit"] = this.line_limit;
        data["line_group"] = this.line_group;
        return data;
    }
}

export interface IConditional {
    id?: number;
    rules?: string | undefined;
    name?: string | undefined;
    busy_rule?: string | undefined;
    line_limit?: number;
    line_group?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}